---
title: "ggplot2 demo"
author: "Norah Jones"
date: "5/22/2021"
format: 
  html:
    code-fold: true
---

```{r libraries, message = FALSE, include = FALSE}
library(dplyr)
library(tidyverse)
library(tidyr)
library(janitor)
library(simplermarkdown)

if (system.file(package = "midfielddata") == "") {
  install.packages("midfielddata",
    repos = "https://MIDFIELDR.github.io/drat/",
    type = "source"
  )
}
library(midfielddata)
```

# Data Import and Cleaning

```{r full data import, message = FALSE, warning = FALSE, eval=FALSE}
# Midfield Data for full dataset
degree <- read.csv("data/degree_2020_03_16_fix9a.csv")
student <- read.csv("data/student_2020_03_16_fix9a.csv")
course <- read.csv("data/course_2020_03_16_fix9a.csv")
term <- read.csv("data/term_2020_03_16_fix9a.csv")
```

```{r partial data import, include = FALSE}
# data(course, degree, term, package = "midfielddata")
```

# Computing CIP Codes

```{r cips}
# Import cip codes
cip <- read.csv("data/cip_codes.csv") %>%
  clean_names() %>%
  rename(
    series = cip_code_two_digit_series,
    cip6 = x2020_cip_code,
    title = cip_code_title
  ) %>%
  # Narrow to only cip codes with comput in the name
  filter(grepl("Comput", title)) %>%
  # Standardize cip codes to four decimal places
  mutate(cip6 = round(cip6, 4)) %>%
  # Remove decimal place
  mutate(cip6 = str_remove(cip6, "\\."))
```

# Degree Conferrment by Cip

```{r combine datasets}
degree_cip <- cip %>%
  left_join(degree, by = "cip6") %>%
  group_by(title) %>%
  summarise(degrees_conferred = n())
```

```{r table 1 - degrees and cips, fig.cap="Table 1. Number of degrees conferred per CIP code and computing major"}
print(degree_cip)
```

```{r fig 1 - bar chart, fig.cap="Figure 1. Bar chart with degrees conferred by CIP code, all other computer science CIP codes have 1 degree or less"}
# Gather degree information
degree_cip %>%
  # Filter for degrees over 1
  filter(degrees_conferred > 1) %>%
  # Reorder axis for descending order
  ggplot(aes(x = reorder(x = title, -degrees_conferred), y = degrees_conferred)) +
  geom_bar(stat = "identity", aes(fill = title)) +
  labs(
    title = "Number of Degrees Conferred per CIP Code",
    x = "Degree",
    y = "Number Conferred (log)",
    fill = "Degree Title"
  ) +
  scale_y_continuous(trans = "log10") +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
  )
```


# Classes Taken

1. Pull all student id's who finished a cs degree  (make a function to insert the cip code of interest - computer science)
2. Match those with student courses taken (name/abbrev/etc) - connect with degree
3. Group by courses 
4. Create 1 function to elicit 1 graph

Use Shiny (multiple types of visuals)

```{r combine datasets for courses}
# Pull cs students by cip code
comp_students <- cip %>%
  left_join(degree, by = "cip6")

# Pull courses completed by these cs students
compstud_courses <- comp_students %>%
  left_join(course, by = c("mcid", "institution")) %>%
  # Create column for course + number
  unite("course_id", abbrev:number, sep = "-")
```

# Calculate course curricula overlap

```{r functions}
percent_classes <- function(cip1, cip2) {
  # Pull classes from cip 1
  cip_1 <- compstud_courses %>%
    group_by(cip6) %>%
    distinct(course_id) %>%
    filter(cip6 == cip1)

  # Pull classes from cip 2
  cip_2 <- compstud_courses %>%
    group_by(cip6) %>%
    distinct(course_id) %>%
    filter(cip6 == cip2)

  # Join theses classes and compare between cips
  joined_data <- cip_1 %>%
    full_join(cip_2,
      by = "course_id"
    )

  # Calculate total courses between both majors
  total_distinct_courses <- nrow(joined_data)

  # Calculate courses that match both majors
  matching_distinct_courses <- joined_data %>%
    drop_na() %>%
    nrow()

  # Return the overlap decimal
  return(matching_distinct_courses / total_distinct_courses)
}

percent_classes(110101, 110701)
```

```{r computer cip lists with overlap}
# Narrowing cip codes with over 1 degree conferred
cip_list <- cip %>%
  left_join(degree, by = "cip6") %>%
  group_by(cip6) %>%
  summarise(degrees_conferred = n()) %>%
  filter(degrees_conferred > 1)

# Making into list
cip_list <- as.list(cip_list$cip6)

# Run function
## Computer and Information Sciences / Computer Science
percent_classes(cip_list[[1]], cip_list[[2]])

## Computer and Information Sciences / Computer Engineering
percent_classes(cip_list[[1]], cip_list[[3]])

## Computer and Information Sciences / Computer Systems Technology
percent_classes(cip_list[[1]], cip_list[[4]])

## Computer Science / Computer Engineering
percent_classes(cip_list[[2]], cip_list[[3]])

## Computer Science / Computer Systems Technology
percent_classes(cip_list[[2]], cip_list[[4]])

## Computer Engineering / Computer Systems Technology
percent_classes(cip_list[[3]], cip_list[[4]])
```

```{r}
# Furrr package - map function for cip6 codes for all overlapping cips

# Try to get heat map for overlap of courses
```

